;; Custom Settings
;; ===============
;; To avoid any trouble with the customization system of GNU emacs
;; we set the default file ~/.gnu-emacs-custom

(setq custom-file "~/.emacs.d/gnu-emacs-custom")
(load "~/.emacs.d/gnu-emacs-custom" t t)

;; auto-recompile .emacs
;; http://tsengf.blogspot.com/2011/07/auto-byte-compile-your-emacs.html
;;

(defun auto-recompile-emacs-file ()
  (interactive)
  (when (and buffer-file-name (string-match "\\.emacs" buffer-file-name))
    (let ((byte-file (concat buffer-file-name "\\.elc")))
      (if (or (not (file-exists-p byte-file))
              (file-newer-than-file-p buffer-file-name byte-file))
          (byte-compile-file buffer-file-name)))))

(add-hook 'after-save-hook 'auto-recompile-emacs-file)

;;
;; These three lines make emacs restore the position
;; of point when visiting a file.
;;
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)

;;
;; answer Emacs yes or no question with y or n
;;
(defalias 'yes-or-no-p 'y-or-n-p)

;;
;; handy mode to browse the current buffer-list
;;
(require 'ibuffer)
;(define-key ibuffer-mode-map (kbd "<SPC>") 'ibuffer-quit)
(define-key ibuffer-mode-map (kbd "<SPC>") 'ibuffer-mark-forward)

;;
;;
;;
(add-to-list 'load-path "~/.emacs.d/yasnippet/")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/snippets")
(setq yas/fallback-behavior '(apply hippie-expand nil))

(defun ElectricCurly ()
  "Inserts opening and closing curly brace, do some indentation and position point."
  (interactive)
  (insert "{")
  (newline)
  (newline)
  (insert "}")
  (forward-line -1)
  (end-of-line)
  (c-indent-defun)
  )

(defun ElectricBracket ()
  "Inserts opening and closing bracket, position point between brackets."
  (interactive)
  (insert "()")
  (backward-char 1)
  )

(defun ElectricSquare ()
  "Inserts closing square brace when opening a square bracket and positions point between brackets"
  (interactive)
  (insert "[]")
  (backward-char 1)
  )

(defun finish-current-line ()
  "Jump to end of line and call newline-and-indent"
  (interactive)
  (end-of-line)
  (insert ";")
  (newline-and-indent)
  )

;; A member for hippie-expand-try-functions-list
;;
(defun mp-try-indent (dummy)
  (interactive '())
  (when (or
	 (and
	  (looking-at "[ \t]+")  
	  (looking-back "[ \t]+" (line-beginning-position)))
	 (eq (line-beginning-position) (point)))
    (indent-according-to-mode)))

;; A member for hippie-expand-try-functions-list
;; Asures that point is not in the middle of a word
;;
(defun mp-inword-guard (dummy)
  "This functiosn checks if point is at a position where an
expansion of eg a yasnippet or auto-completions is not usefull. This is
the case if point is at a nonwhitespace-character. It is ment to be a
member of hippie-expand-try-functions-list: if (point is in the middle
of a word) true else nil"
  (interactive '())
  (when
      (and
       (not (or (looking-at "$")(looking-at "[ \t]+")))
       (not (eq nil (thing-at-point 'word)))
       (not (looking-at "[\])}:]")))
    (progn
      (indent-according-to-mode)
      't)))

(eval-when-compile (c++-mode))
      
;; (add-hook 'c-initialization-hook '(lambda ()
;; 				    (interactive) 
;; 				    (message (concat "===CC-Mode Version " c-version " is loaded==="))
;; 				    't))

(defun get-implementation-for-header-file (headerfilename)
  "For a given filename ending on h, H, hpp or HPP return the corresponding implementation-filename."
  (interactive)
  (let* ((extmap '(("h" . "c") ("H" . "C") ("hpp" . "cpp") ("HPP". "CPP")))
	(prefix (file-name-sans-extension (file-name-nondirectory headerfilename)))
	(extension (file-name-extension headerfilename)))
    (format "%s.%s" prefix (cdr (assoc extension extmap)))))
    
(defun c++-implement-current-function ()
  "Expects Point to be in a line that defines a function. Reads the functions definition and writes a function template into the .cpp file that corresponds to the current file."
  (interactive)
  ;; KEYWORDCLASS CLASSNAME [...] [TYPE] NAME PARENTOPEN ARGUMENTLIST PARENTCLOSE SEMICOLON
  (let* ((current-line (thing-at-point 'line))
	(result '())
	(iffile (get-implementation-for-header-file (buffer-file-name)))
	(ifbuffer (get-file-buffer iffile)))
;;	(current-point (point))
;;	(current-text (buffer-string)))
    (save-excursion
      (beginning-of-line)
      (re-search-forward "^\s*\\([a-zA-Z1-9_:<>]+\\)\s+\\([a-zA-Z_1-9]+\\)(\\([a-zA-Z0-9,\s:<>_]*\\));")
      (add-to-list 'result (match-string 1)) ;; Return value
      (add-to-list 'result (match-string 2)) ;; Function name
      (add-to-list 'result (match-string 3));; Arguments
      (re-search-backward "class\s+\\([a-zA-Z1-9_]+\\)\s*$")
      (add-to-list 'result (match-string 1)))
    (if ifbuffer
	(progn
	  (set-buffer ifbuffer)
	  (set-window-buffer (selected-window) ifbuffer))
      (find-file iffile))
    (goto-char (point-max))
    (insert (format "\n%s %s::%s(%s)\n{\n};" (nth 3 result) (nth 0 result) (nth 2 result) (nth 1 result)))
    (forward-line -1)
    (end-of-line)
    (newline-and-indent)))


;; Customizations for all modes in CC Mode. 
(defun mp-c-mode-common-hook () 
  ;; key bindings for all supported languages.  We can put these in
  ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
  ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
  (local-set-key "\C-q" 'hippie-expand)
;  (local-set-key "{" 'ElectricCurly)
;  (local-set-key "(" 'ElectricBracket)
  (local-set-key "[" 'ElectricSquare)
  (local-set-key (kbd "C-;") 'finish-current-line)
  (local-set-key (kbd "<tab>") 'hippie-expand)
  (local-set-key (kbd "C-h w") 'woman)
  (local-set-key (kbd "C-c C-c") 'compile)
  (local-set-key (kbd "<return>") 'newline-and-indent)
  (local-set-key (kbd "C-S-c") 'c++-implement-current-function)
  )

(add-hook 'c-mode-common-hook 'mp-c-mode-common-hook)

(defun info-new-frame (info-file)
  "Open an info-node in a new frame."
  (interactive '(nil))
  (select-frame (make-frame))
  (info info-file)
  )

(defun rename-info-buffer ()
  (interactive)
  (rename-buffer 
   (format "(%s) %s" 
	   (file-name-nondirectory Info-current-file) 
	   Info-current-node
	   )))

(add-hook 'Info-selection-hook 'rename-info-buffer)

(defun show-elisp-info-frame ()
  "Opens a frame and display the info node for emacs lisp."
  (interactive)
  (info-new-frame "(elisp)Top")
  )

(defun mp-close-buffer-and-window ()
  "Closes the window and deletes the frame if the window is the only one shown."
  (interactive)
  (if (eq (next-window) (selected-window))
      (delete-frame)
    (delete-window)
    )
  )

(defun fmt-region ()
  "Replaces the current region by the output of the fmt program."
  (interactive)
  (shell-command-on-region (region-beginning) (region-end) "fmt" nil 't))

(defun scroll-up-one-line()
  (interactive)
  (scroll-up 1))

(defun scroll-down-one-line()
  (interactive)
  (scroll-down 1))

(global-set-key (kbd "<f1>") 'info-new-frame)
(global-set-key (kbd "C-<f1>") 'show-elisp-info-frame)
(global-set-key (kbd "<f2>") 'new-frame)
(global-set-key (kbd "<f3>") 'delete-frame)
(global-set-key (kbd "<f4>") 'calendar)
(global-set-key (kbd "<f5>") 'speedbar)
(global-set-key (kbd "C-x b") 'ibuffer)
(global-set-key (kbd "C-<up>") 'scroll-down-one-line)
(global-set-key (kbd "C-<down>") 'scroll-up-one-line)
(global-set-key (kbd "C-x C-f") 'ffap)
(global-set-key (kbd "C-x f") 'fmt-region)

(define-key minibuffer-local-map (kbd "C-p") 'previous-history-element)
(define-key minibuffer-local-map (kbd "C-n") 'next-history-element)

(defun mp-Info-mode-hook-extension ()
  "[mp] personal extension to the info-mode hook"
  (interactive)
  (define-key Info-mode-map [q] 'mp-close-buffer-and-window)
  (define-key Info-mode-map (kbd "<tab>") 'Info-next-reference)
  )

(add-hook 'Info-mode-hook 'mp-Info-mode-hook-extension)
;
;(add-hook 'org-mode-hook 'mp-org-mode-hook)

;; Show current function in mode-line
(which-function-mode 1)

;; Mark matching parentheses
(show-paren-mode 1)
(setq show-paren-delay 0)

;; use 'list-colors-display' to see available color names
;; (set-face-background 'mode-line "LightSteelBlue3")
;;(set-background-color "khaki1")

(desktop-save-mode 1)

(add-to-list 'load-path "~/.emacs.d/elisp/")

;; browse-kill-ring extension. see ~/.emacs.d/elisp/browse-kill-ring.el.
(require 'browse-kill-ring)
(global-set-key (kbd "M-y") 'browse-kill-ring)

;; some nice message for the *messages* buffer
(message (concat "---Initialization finished---"))
(message (concat "---Emacs " emacs-version " ready---"))

(setq gdb-many-windows 't)

;; load own cc-mode version 5.32
;; (add-to-list 'load-path "~/.emacs.d/cc-mode")

;; autoinsert stuff

(load "mp-autoinsert.el")

;; assume .h files are c++. c++ supersedes c anyway...
(setq auto-mode-alist (cons '("\\.h$" . c++-mode) auto-mode-alist))

;; Make use of emacs-24' new feature "load-theme"
(when (>= emacs-major-version 24)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'zenburn))


;; (defun mp-org-mode-keys ()
;;   (interactive)
;;   (local-set-key (kbd "C-S-w") 
;; 		 '(lambda ()
;; 		    (interactive)
;; 		    (browse-url (format "http://de.wiktionary.org/wiki/%s" (thing-at-point 'word))))))

;; (add-hook 'org-mode-hook 'my-org-mode-keys)

(server-start)

;; Make linum-mode display a blank between linum-bar and the buffer content
(setq linum-format "%05d")
;;(global-linum-mode -1)
(line-number-mode)
(column-number-mode)

(setq
 sql-password "matthias"
 sql-server "localhost"
 sql-user "matthias")

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "/usr/bin/google-chrome")

